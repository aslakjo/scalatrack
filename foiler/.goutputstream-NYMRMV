\documentclass[norsk]{beamer}
 
\usepackage[T1]{fontenc}
\usepackage{textcomp,pdfpages}
\usepackage{babel}

\usepackage{amsmath, amsfonts, epsfig, xspace}
\usepackage{pstricks,pst-node}
\usepackage{multimedia}
\usepackage{beamerthemesplit}
\usepackage[absolute, overlay]{textpos}
\usepackage{listings}

\usepackage{color}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{
  language=java,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\tiny\ttfamily},
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=2
}
 


\usetheme{bekk}


\author{Aslak Johannessen \\ aslakjo@bekk.no  @aslakjo}

\title[Scala]{Actors}
\subtitle[]{Scala -actors}
\institute{BEKK Consulting AS}


\begin{document}

\maketitle

\begin{frame}{Scala quiz}
  \begin{content}
    Oppgave: Lag et quizlag og implementer det som en actor\\
    
    \includegraphics[scale=0.9]{quizlag}
  \end{content}
\end{frame}

\begin{frame}{Scala quiz}
  \begin{content}
    Quiz på vanlig måte, med en liten vri\\
    \center
    1. Be om et spørsmål og få spørsmål\\
    \includegraphics[scale=0.6]{quiz-sporsmalsvar}\\
    2. Svar på spørsmålet og få vite om det er riktig
  \end{content}
\end{frame}


\begin{frame}{Actors - hva er greia}
  \begin{content}
    Wikipedia: \\
    \begin{quotation}In computer science, the Actor model is a mathematical model of concurrent computation that treats "actors" as the universal primitives of concurrent digital computation: in response to a message that it receives, an actor can make local decisions, create more actors, send more messages, and determine how to respond to the next message received. The Actor model originated in 1973. It has been used both as a framework for a theoretical understanding of concurrency, and as the theoretical basis for several practical implementations of concurrent systems.
    \end{quotation}
  \end{content}
\end{frame}

\begin{frame}{Actors - hva er greia}
  \begin{content}
    Wikipedia: \\
    \begin{quotation}... \emph{concurrent computation} ... \emph{in response to a message that it receives, an actor can make local decisions ... and        determine how to respond to the next message received.}  \emph{The Actor model originated in 1973.} ...
    \end{quotation}
  \end{content}
\end{frame}


\begin{frame}[fragile]{Actors - eksempler eksempler}
  \begin{content}
    \begin{lstlisting}
      case class Tick
      
      class Counter extends Actor {
        private var counter = 0

        def receive = {
          case Tick =>
            counter += 1
            println(counter)
        }
      }
    \end{lstlisting}
  \end{content}
\end{frame}

\begin{frame}{Actors - in action}
  \begin{content}
    \centering
    1. MoreQuestions(new Team(``lag en''))\\
    2. Question(``Ping'', Nil)\\
    \begin{columns}
      \column{.1\textwidth}
        Server
      \column{.5\textwidth}
        \includegraphics[scale=0.5]{quiz-sporsmalsvar}
      \column{.1\textwidth}
        Lag
    \end{columns}
    3. Answer(question, ``pong'')\\
    4. Correct()
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Actors - in action}
  \begin{content}
    \centering
    \begin{lstlisting}
      case class MoreQuestions(val team:Team)
      case class Question(val question:String, val content:Any)
    \end{lstlisting}
    \begin{columns}
      \column{.1\textwidth}
        Server
      \column{.5\textwidth}
        \includegraphics[scale=0.5]{quiz-sporsmalsvar}
      \column{.1\textwidth}
        Lag
    \end{columns}
    \begin{lstlisting}
      case class Answer(val team:Team, val question:Question, val answer:Any)
      case class Correct extends Verdict
    \end{lstlisting}
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Actors - in action}
  \begin{content}
    \begin{columns}
      \column{.2\textwidth}
        \includegraphics[scale=0.3]{quiz-sporsmalsvar}
      \column{.8\textwidth}
        \begin{lstlisting}
          val question = (remote !! MoreQuestions(team)).get.asInstanceOf[Question]
          remote !! new Answer( team, question, giveAnswer(question) )

          def giveAnswer(quiestion: Question)={
            question match {
              case x@Question("Ping", "") =>  "pong"
            }
          }
        \end{lstlisting}
    \end{columns}
  \end{content}
\end{frame}

\kontrast{Oppgave}


\kontrast{Actors}

\begin{frame}{Actors - hva er det}
  \huge
  \begin{content}
    \begin{equation*}
      \left. 
        \begin{aligned}
          \text{naturlig programerings model}\\
          \text{enkelt å paralellisere}\\
          \text{gode biblioteker}\\
          \text{enkelt å gjøre riktig} 
        \end{aligned} 
      \right\}
        Actors
    \end{equation*}
  \end{content}
\end{frame}

\kontrast{Hvordan?}

\begin{frame}{Actors - hva er det}
  \huge
  \begin{content}
    \begin{equation*}
      \left.
        Actors
      \right.
        \begin{cases}
          &\text{individer er normalt}\\
          &\text{ingen deling}\\
          &\text{akka actors erlang}\\
          &\text{objekter} 
        \end{cases} 
    \end{equation*}
  \end{content}
\end{frame}

\begin{frame}{Actors - helt enkelt}
  \begin{content}
    \includegraphics[width=\textwidth]{mailbox}\\
    Ingen deling \hfill-\hfill meldingsboks \hfill-\hfill eksterne
  \end{content}
\end{frame}

\kontrast{Videre - oppgave}

\begin{frame}[containsverbatim]{Oppgave - meldinger}
  \begin{content}
    \begin{lstlisting}
      package no.bekk.scala.messages
      trait Message
      trait Verdict

      case class MoreChallenges(val team:Team) extends Message
      case class Question(val question:String, val content:Any) extends Message

      case class Answer(val temaName:Team, val question:Question, val answer: Any) extends Message
      
      case class Correct() extends Message with Verdict 
      case class Wrong() extends Message with Verdict
    \end{lstlisting}
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Oppgave - meldinger}
  \begin{content}
    \begin{lstlisting}
      package no.bekk.scala.messages
      trait Message
      trait Verdict

      case class MoreChallenges(val team:Team) extends Message
      case class Question(val question:String, val content:Any) extends Message

      case class Answer(val temaName:Team, val question:Question, val answer: Any) extends Message
      
      case class Correct() extends Message with Verdict 
      case class Wrong() extends Message with Verdict
    \end{lstlisting}
  \end{content}

  Ønsker å;
    \begin{itemize}
      \item ta i mot et spørsmål Question, 
      \item finne ut hva det handler om, og 
      \item besvare
    \end{itemize}
\end{frame}

\kontrast{Pattern matching}

\begin{frame}[containsverbatim]{Pattern matching - enkelt}
  \begin{content}
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
      newMessage match {
	      case Tick => counter += 1
	      case Tack(i:Int) => counter += i
	      case message@Clear => counter = 0
	      case "add a hundred" => counter += 100
	      case 2 =>counter += 2
	      case _ => // Do nothing
      }
    \end{lstlisting} 
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Pattern matching - enkelt}
  \centering
  \begin{content}
    Type pattern
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
	      case Tick => counter += 1
    \end{lstlisting} 
    Matcher på typen, Tick
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Pattern matching - enkelt}
  \centering
  \begin{content}
    Constructor pattern
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
	      case Tack(i:Int) => counter += i
    \end{lstlisting} 
    Matcher på typen, Tick, med hvor den interne variablen er en Int
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Pattern matching - enkelt}
  \centering
  \begin{content}
    Variable binding pattern
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
	      case message@Clear => counter = 0
        case message:Clear => counter = 0 //compile err.
    \end{lstlisting} 
    Henter ut Clear objektet til message variablen.
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Pattern matching - enkelt}
  \centering
  \begin{content}
    Constant pattern
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
	      case  "add a hundred" => counter += 100
	      case 2 =>counter += 2
    \end{lstlisting} 
    Matcher singletons som er lik seg selv.
  \end{content}
\end{frame}

\begin{frame}[containsverbatim]{Pattern matching - enkelt}
  \centering
  \begin{content}
    Wildcard pattern
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
	      case _ => // Do nothing
    \end{lstlisting} 
    Matcher alt.
  \end{content}
\end{frame}

\kontrast{Oppgaver}

\begin{frame}[containsverbatim]{Pattern matching - avansert}
  \centering
  \begin{content}
    Matche på spørsmål teksten...
    \pause
    Regexp
    \pause
    \begin{lstlisting}[basicstyle={\large\ttfamily}]
	    val Epost = 